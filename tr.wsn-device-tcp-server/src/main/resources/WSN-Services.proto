
option java_package = "de.uniluebeck.itm.tcp.server.utils";
option java_outer_classname = "MessageServiceFiles";

// Empty Answer for Operations, which have to be done
message EmptyAnswer {
}

// transport the timeout-Parameter
message Timeout {
	required int64 timeout = 1;
	required string OperationKey = 2;
}

// for Operations, which only transport the Operation-Key
message OpKey {
	required string OperationKey = 1;
}

// for Operation, which only transport a message over TCP
message STRING {
	required string query = 1;
}

// Type to transport Exceptions over TCP
// with this the true Exception, if the Language has Exception, can be rebuild
message FailureException {
	required string OperationKey = 1;
	required string ExceptionName = 2;
	required string ExceptionMessage = 3;
}

// Type to transport a onProgressChange-Message to the client
message changeMessage {
	required string OperationKey = 1;
	required string query = 2;
}

// Type to transport the ChipType over TCP
message ChipData {
	required string type = 1;
	required string OperationKey = 2;
}

// Type to transport identification-Informations over TCP
message Identification {
	required string deviceID = 1;
	required string username = 2;
	required string password = 3;
}

// Type to transport the binary Informations to program a Device
message ProgramPacket {
	repeated bytes BinaryPacket = 1;
	required int64 timeout = 2;
	required string OperationKey = 3;
	required int64 crc = 6;
}

// Type to transport the MacAddress over TCP
message MacData{
	repeated bytes MACADDRESS = 1;
	optional int64 timeout = 2;
	optional string OperationKey = 3;
}

// Type to transport the binary Informations to write the flash of a Device
message FlashData{
	required int32 address = 1;
	repeated bytes data = 2;
	required int32 length = 3;
	required int64 timeout = 4;
	required string OperationKey = 5;
	required int64 crc = 6;
}

// Type to transport the binary Informations to send a message to a Device
message sendData {
	required int32 type = 1;
	repeated bytes data = 2;
	optional int64 timeout = 3;
	required string OperationKey = 4;
}

// Type to transport the messages from the Listeners to the clients
message ListenerData {
	required string source = 1;
	optional int32 type = 2;
	repeated bytes data = 3;
	required string OperationKey = 4;
}

// Type to add a MessageListener to a physical Device over TCP
message PacketTypeData {
	repeated int32 type = 1;
	required string OperationKey = 2;
}

// Type to transport a byte[] over TCP
message ByteData {
	repeated bytes data = 1;
	optional string OperationKey = 2;
}

// Type to transport the answers to a OperationHandle-Operation
message GetHandleAnswers {
	optional STRING chipData = 1;
	optional EmptyAnswer emptyAnswer = 2;
	optional MacData MacAddress = 3;
	optional ByteData data = 4;
}

// Type to transport the answers to a onSuccess-message
message ReverseAnswer {
	optional ChipData chipData = 1;
	optional OpKey success = 2;
	optional MacData MacAddress = 3;
	optional ByteData data = 4;
}

// RPC-Operations to send informations from the client to the server
service Operations {
	rpc connect (Identification) returns (EmptyAnswer);
	
	rpc program (ProgramPacket) returns (EmptyAnswer);
	rpc eraseFlash (Timeout) returns (EmptyAnswer);
	rpc readFlash (FlashData) returns (EmptyAnswer);
	rpc readMac (Timeout) returns (EmptyAnswer);
	rpc reset (Timeout) returns (EmptyAnswer);
	rpc send (sendData) returns (EmptyAnswer);
	rpc writeFlash (FlashData) returns (EmptyAnswer);
	rpc writeMac (MacData) returns (EmptyAnswer); 
	rpc getChipType (Timeout) returns (EmptyAnswer);
	
	rpc cancelHandle (OpKey) returns (EmptyAnswer);
	rpc getHandle (OpKey) returns (GetHandleAnswers);
	rpc getState (OpKey) returns (STRING);
}

// RPC-Operations to control the MessageListeners
service PacketService {
	rpc addMessagePacketListener (PacketTypeData) returns (EmptyAnswer);
	rpc addMessagePlainTextListener (PacketTypeData) returns (EmptyAnswer);
	rpc removeMessagePacketListener (OpKey) returns (EmptyAnswer);
	rpc removeMessagePlainTextListener (OpKey) returns (EmptyAnswer);
}

// RPC-Operations to send information from the Server to the Client (Reverse-RPC)
service PacketServiceAnswer{
	rpc sendReversePacketMessage (ListenerData) returns (EmptyAnswer);
	rpc sendReversePlainTextMessage (ListenerData) returns (EmptyAnswer);
	
	rpc reverseOnFailure (FailureException) returns (EmptyAnswer);
	rpc reverseOnCancel (OpKey) returns (EmptyAnswer);
	rpc reverseExecuteEvent (OpKey) returns (EmptyAnswer);
	rpc reverseChangeEvent (changeMessage) returns (EmptyAnswer);
	rpc reverseSuccess (ReverseAnswer) returns (EmptyAnswer);
	
}

// RPC-Operations to control the Server remote
// TODO
service RemoteOperations{
	//rpc newDeviceConfig () returns (EmptyAnswer);
	//rpc editDeviceConfig () returns ();
	//rpc reloadDeviceConfig () returns ();
}
