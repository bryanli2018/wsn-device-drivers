/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package de.uniluebeck.itm.overlaynet;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import org.simpleframework.xml.*;

public class Metadata implements TBase<Metadata, Metadata._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Metadata");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)1);
  private static final TField FABRICATE_FIELD_DESC = new TField("fabricate", TType.STRING, (short)2);
  private static final TField OSVERSION_FIELD_DESC = new TField("osversion", TType.STRING, (short)3);
  private static final TField IPADRESS_FIELD_DESC = new TField("ipadress", TType.STRING, (short)4);
  @Element
  public long id;
  @Element
  public String fabricate;
  @Element
  public String osversion;
  @Element
  public String ipadress;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    FABRICATE((short)2, "fabricate"),
    OSVERSION((short)3, "osversion"),
    IPADRESS((short)4, "ipadress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FABRICATE
          return FABRICATE;
        case 3: // OSVERSION
          return OSVERSION;
        case 4: // IPADRESS
          return IPADRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.FABRICATE, new FieldMetaData("fabricate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.OSVERSION, new FieldMetaData("osversion", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.IPADRESS, new FieldMetaData("ipadress", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Metadata.class, metaDataMap);
  }

  public Metadata() {
  }

  public Metadata(
    long id,
    String fabricate,
    String osversion,
    String ipadress)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.fabricate = fabricate;
    this.osversion = osversion;
    this.ipadress = ipadress;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Metadata(Metadata other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetFabricate()) {
      this.fabricate = other.fabricate;
    }
    if (other.isSetOsversion()) {
      this.osversion = other.osversion;
    }
    if (other.isSetIpadress()) {
      this.ipadress = other.ipadress;
    }
  }

  public Metadata deepCopy() {
    return new Metadata(this);
  }

  @Deprecated
  public Metadata clone() {
    return new Metadata(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.fabricate = null;
    this.osversion = null;
    this.ipadress = null;
  }

  public long getId() {
    return this.id;
  }

  public Metadata setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getFabricate() {
    return this.fabricate;
  }

  public Metadata setFabricate(String fabricate) {
    this.fabricate = fabricate;
    return this;
  }

  public void unsetFabricate() {
    this.fabricate = null;
  }

  /** Returns true if field fabricate is set (has been asigned a value) and false otherwise */
  public boolean isSetFabricate() {
    return this.fabricate != null;
  }

  public void setFabricateIsSet(boolean value) {
    if (!value) {
      this.fabricate = null;
    }
  }

  public String getOsversion() {
    return this.osversion;
  }

  public Metadata setOsversion(String osversion) {
    this.osversion = osversion;
    return this;
  }

  public void unsetOsversion() {
    this.osversion = null;
  }

  /** Returns true if field osversion is set (has been asigned a value) and false otherwise */
  public boolean isSetOsversion() {
    return this.osversion != null;
  }

  public void setOsversionIsSet(boolean value) {
    if (!value) {
      this.osversion = null;
    }
  }

  public String getIpadress() {
    return this.ipadress;
  }

  public Metadata setIpadress(String ipadress) {
    this.ipadress = ipadress;
    return this;
  }

  public void unsetIpadress() {
    this.ipadress = null;
  }

  /** Returns true if field ipadress is set (has been asigned a value) and false otherwise */
  public boolean isSetIpadress() {
    return this.ipadress != null;
  }

  public void setIpadressIsSet(boolean value) {
    if (!value) {
      this.ipadress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case FABRICATE:
      if (value == null) {
        unsetFabricate();
      } else {
        setFabricate((String)value);
      }
      break;

    case OSVERSION:
      if (value == null) {
        unsetOsversion();
      } else {
        setOsversion((String)value);
      }
      break;

    case IPADRESS:
      if (value == null) {
        unsetIpadress();
      } else {
        setIpadress((String)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Long(getId());

    case FABRICATE:
      return getFabricate();

    case OSVERSION:
      return getOsversion();

    case IPADRESS:
      return getIpadress();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case ID:
      return isSetId();
    case FABRICATE:
      return isSetFabricate();
    case OSVERSION:
      return isSetOsversion();
    case IPADRESS:
      return isSetIpadress();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Metadata)
      return this.equals((Metadata)that);
    return false;
  }

  public boolean equals(Metadata that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fabricate = true && this.isSetFabricate();
    boolean that_present_fabricate = true && that.isSetFabricate();
    if (this_present_fabricate || that_present_fabricate) {
      if (!(this_present_fabricate && that_present_fabricate))
        return false;
      if (!this.fabricate.equals(that.fabricate))
        return false;
    }

    boolean this_present_osversion = true && this.isSetOsversion();
    boolean that_present_osversion = true && that.isSetOsversion();
    if (this_present_osversion || that_present_osversion) {
      if (!(this_present_osversion && that_present_osversion))
        return false;
      if (!this.osversion.equals(that.osversion))
        return false;
    }

    boolean this_present_ipadress = true && this.isSetIpadress();
    boolean that_present_ipadress = true && that.isSetIpadress();
    if (this_present_ipadress || that_present_ipadress) {
      if (!(this_present_ipadress && that_present_ipadress))
        return false;
      if (!this.ipadress.equals(that.ipadress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Metadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Metadata typedOther = (Metadata)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFabricate()).compareTo(typedOther.isSetFabricate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFabricate()) {      lastComparison = TBaseHelper.compareTo(this.fabricate, typedOther.fabricate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsversion()).compareTo(typedOther.isSetOsversion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsversion()) {      lastComparison = TBaseHelper.compareTo(this.osversion, typedOther.osversion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpadress()).compareTo(typedOther.isSetIpadress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpadress()) {      lastComparison = TBaseHelper.compareTo(this.ipadress, typedOther.ipadress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FABRICATE
          if (field.type == TType.STRING) {
            this.fabricate = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // OSVERSION
          if (field.type == TType.STRING) {
            this.osversion = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // IPADRESS
          if (field.type == TType.STRING) {
            this.ipadress = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    if (this.fabricate != null) {
      oprot.writeFieldBegin(FABRICATE_FIELD_DESC);
      oprot.writeString(this.fabricate);
      oprot.writeFieldEnd();
    }
    if (this.osversion != null) {
      oprot.writeFieldBegin(OSVERSION_FIELD_DESC);
      oprot.writeString(this.osversion);
      oprot.writeFieldEnd();
    }
    if (this.ipadress != null) {
      oprot.writeFieldBegin(IPADRESS_FIELD_DESC);
      oprot.writeString(this.ipadress);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Metadata(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fabricate:");
    if (this.fabricate == null) {
      sb.append("null");
    } else {
      sb.append(this.fabricate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osversion:");
    if (this.osversion == null) {
      sb.append("null");
    } else {
      sb.append(this.osversion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipadress:");
    if (this.ipadress == null) {
      sb.append("null");
    } else {
      sb.append(this.ipadress);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

